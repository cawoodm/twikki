{
  "tiddlers": [
    {
      "title": "$CorePackagesHelp",
      "text": "The [[$CorePackages]] tiddler contains a [[DataList]] of packages to import when TWiki first loads.\n\nCore Packages are a select few packages which form the base of twiki i.e. necessary functionality.\nThese should be distinguished from [[$ExtensionPackages]] which provided additional functionality.\n\n## What is a Package?\n\nA package, at it's most basic is just a URL which returns a list of tiddlers. Technically a package is an object with at least one property `tiddlers` of type Array.\n\nThese tiddlers:\n* may contain functionality or data\n* once loaded, all code tiddlers are executed\n* can encapsulate things like themes or plugins\n* may or may not be stored depending on flags applied when importing them\n\n## Import Flags\nIn addition to URLs you can specify options as to how tiddlers are auto-imported:\n\n* `save`: Set the `save` flag to ensure imported tiddlers are stored locally when you save. The default is off so imported tiddlers are nor persisted. By default the `core` and `icons` packages are set to `save` so that you have basic functionality offline\n* `force`: Set the `overwrite` flag to ensure the entire package is always imported even if this means overwriting tiddlers you may have changed. The default is off which means the auto-importer will prompt you about overwriting tiddlers you may have changed.\n* `nooverwrite`: Set the `nooverwrite` flag if you plan to change imported tiddlers and don't want them overwritten. The auto-importer will just skip importing them if the tiddler exists\n\n## Road Map\nCurrently Packages are just URLs, later we will introduce the concept of Repos which store a list of uniquely named packages and their URLs.\nAt that time we can simply refer to packages by their unique name (e.g. `core` or `backup-plugin`).\n\n- In future a package will contain more metadata e.g. name, version, author etc.\n- You will also be able to define update policies for packages e.g. if you want automatic updating of core patches or minor updates to extensions\n\n\n",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4508968Z",
      "updated": "2024-11-08T10:23:34.0874729Z"
    },
    {
      "title": "$GeneralSettings",
      "text": "{\n  \"backup\": {\n    \"JSONBin\": {\n      \"comment\": \"This is a public bin for demo purposes, please don't abuse:\",\n      \"accessKey\": \"$2a$10$IMp0d7NARrSQ1JuR.H16guEHsUghKIxJrUx.UngBEg2SOw1hbJrhW\",\n      \"binId\": \"66e99fedacd3cb34a8863638\"\n    },\n    \"backupInSeconds\": 60\n  }\n}",
      "tags": [],
      "type": "json",
      "created": "2024-11-08T10:20:43.4518962Z",
      "updated": "2024-10-04T19:45:16.2215780Z"
    },
    {
      "title": "$ThemeProperties",
      "text": ":root {\n  --col0: #222;\n  --col1: #999999;\n  --colbg2: #ffffff;\n  --col3: #cbcbcb;\n  --col4: #bbbbbb;\n  --colbg3: #e8e8e8;\n  --col6: #70adfd;\n}",
      "tags": [
        "$StyleSheet"
      ],
      "type": "css",
      "created": "2024-11-08T10:20:43.4548962Z",
      "updated": "2024-10-04T19:45:16.2215780Z"
    },
    {
      "title": "$Website",
      "text": "tw.events.subscribe('ui.loaded', () => {\n  // Show 'Welcome' if no tiddlers are defined\n  let t = tw.run.getTiddler('Welcome');\n  if (!t) return;\n  if (!tw.tiddlers.visible.length)\n    tw.run.showTiddler('Welcome');\n}, 'website');\n",
      "tags": [],
      "type": "script/js",
      "created": "2024-11-08T10:20:43.4558967Z",
      "updated": "2024-10-23T07:47:05.6940304Z"
    },
    {
      "title": "Code Tiddler",
      "text": "// This code tiddler is run as soon as Twiki is loaded/reloaded\nconsole.debug('Hello from the Code Tiddler!');\n",
      "tags": [],
      "type": "script/js",
      "created": "2024-11-08T10:20:43.4578975Z",
      "updated": "2024-10-11T11:05:51.1451175Z"
    },
    {
      "title": "Concepts",
      "text": "## Types of Tiddlers\nThe `type` field of a tiddler determines what it's content means and how it is displayed.\n\n* System tiddlers:\n  * In general tiddler titles beginning with `$` are considered SystemTiddlers and hidden by default.\n  * Tiddlers tagged with *$Shadow* are also hidden from normal searches\n  * To view hidden tiddlers just prefix your search with `$`\n* Rendering is based on the tiddler type:\n  * `css`, `html/template` or `scripts/js` are displayed as code with highlighting\n  * `x-twiki` or `markdown` are rendered as markdown and intended for reading\n  *  `list`, `keyval` or `table` are rendered as markdown and intended for storing structured data\n  * `json` is rendered as JSON and intended for storing data/objects\n* Behaviour can be based on type or name:\n  * Type:\n    * Code tiddlers (`scripts/js`) are executed with eval() in the global context\n  * Name:\n    * The [[$Theme]] tiddler is a list of StyleSheets which are applied as CSS\n    * The [[$CorePackages]] tiddler is a list of packages which are imported as tiddlers\n    * The [[$TiddlerDisplay]] tiddler is an HTML template for customizing how tiddlers are displayed\n  \n* $Shadow tiddlers are included in source, expected to be there and we cannot start without them\n* Packages specified in [[$CorePackages]] are loaded from URLs when we start\n  * Core: Adds basic useful functionality\n  * Website: provides helpful content and functionality for the TWiki website\n  * Onboarding: The onboarding package helps users learn TWiki\n* Tiddlers imported via a package are not automatically saved to your localStorage when you save\n  * If you edit and save them then they will be\n  * Once you save them, they will not be overwritten from the package until you delete them\n",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4603411Z",
      "updated": "2024-10-11T19:01:18.0938521Z"
    },
    {
      "title": "DataList",
      "text": "A DataList tiddler is a tiddler of type `list`.\n\nSuch tiddlers are intended to store a list of data which could be a list of strings or more structured data.\n\nSome basic examples are the [[$TiddlerTypes]] tiddler which stores a list of all the different tiddler types. By using the core function `getKeyValuesArray` we can parse such `key:value` lists into an array of objects with `{key, value}` pairs which is useful for storing simple configurations.\n\nA more functional example would be [[$CorePackages]] which stores a list of URLs of packages to import. $CorePackages is interesting because it's just a bunch of strings `<url> flag,option` but the application parses each line to determine what flags and options apply to each url.\n\nIn future we will offer a new type `table` which clearly separates the fields and displays them as a table.\n\nNote: For `list` tiddlers only those lines marked as list items (beginning with `* `) are considered for the list. Everything else is just like a comment for the reader.",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4616134Z",
      "updated": "2024-10-11T20:48:03.9670569Z"
    },
    {
      "title": "ExamplePlugin",
      "text": "This ExamplePlugin is not really a plugin but a proof of concept in packaging plugins.\nThe idea is that we can have a single tiddler with multiple named sections which can then be handled as if they were individual tiddlers.\n\nFor example referencing or linking to [[ExamplePlugin/Settings]] would link to that section or \"sub-tiddler\".\n\nEach subtiddler has it's own content type and can thus be JS, CSS, JSON, DataList and can be used as if it were an individual tiddler.\n\nA developer may work with these sections as individual files (for intellisense and code formatting in their IDE) but the published result is a single tiddler. Strictly speaking we don't need this to be a single tiddler since we can include separate tiddlers into one and just add all separate tiddlers to a single package. However, it's neat for end-users to be able to delete or update a single tiddler and thus delete/update the plugin.\n\nThis plugin will do provide some examples of widgets and extensible functions.\n\nFeel free to customize it's [settings](#ExamplePluginSettings) or look at the [code](#ExamplePluginCode).\n\n# Examples\ntype: x-twiki\n{{ExamplePluginExamples}}\n\n# Settings\n* someSetting: hello\n* someValue: 42\n* someOption: true\n\nSome description of the settings here.\n\n# Config\n```json\n{\n  \"maxResults\": 100,\n  \"pageSize\": 20,\n  \"showRanking\": false\n}\n```\n\n# Data\n```json\n[\n  {\"code\": \"de\", \"language\": \"German\"},\n  {\"code\": \"en\", \"language\": \"English\"}\n]\n```\n# Code\n```javascript\ntw.extensions.registerMacro('example', 'hello', (name) => {\n  return `Hello ${name}`;\n}, {version: '1.0.0'});\n\n// <<example.hello Marc>>\n\n```\n\n# StyleSheet\n```css\ndiv.example {\n  color: red\n}\n```\n# Theme\n* [[$StyleSheetCore]]\n* [[$StyleSheetCoreDark]]\n* [[$ExampleTheme]]\n* [[$StyleSheetUser]]\n\n# Tests\n```javascript\n// ...\n```\n\n# Meta\n* Author: Marc Cawood\n* Version: 1.0.1\n* URL: https://cawodm.github.io/packages/example-plugin.json\n",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4626118Z",
      "updated": "2024-10-29T15:08:11.7238059Z"
    },
    {
      "title": "ExamplePluginExamples",
      "text": "## Greet John Smith\n`<<example \"John Smith\">>`  \n<<example.hello \"John Smith\">>",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4646123Z",
      "updated": "2024-10-26T19:18:34.0614170Z"
    },
    {
      "title": "Features",
      "text": "* Saving works out of the box\n  * localStorage with Backup option via plugin\n  * [[Backup]] to or [[Synchronization]] with [JSONBin](https://jsonbin.io/)\n* Namespaces: Easily switch between different stores!\n* List all tiddlers\n  * [All Normal Tiddlers](#msg:ui.open.all)\n  * [Really All (*) Tiddlers](#msg:ui.open.all:{\"title\":\"*\",\"tag\":\"*\"})\n* Add, Edit, Close and Delete a tiddler\n  * Double-Click to edit\n  * Ctrl+Enter to save\n  * [[$TrashedTiddlers]] saved not really deleted\n  * TWiki tiddlers are validated (e.g. macros) on save\n  * JSON tiddlers are validated on save\n* Rendering \n  * x-twiki and [CommonMark](#Markdown%20Test) markdown\n  * Code highlighting ([js](#Code%20Tiddler), [css](#StyleSheet) and [html](#HTML%20Example))\n* Open single or list of tiddlers via link\n  * [⭐Favorties](#msg:ui.open.all:tag:Favorite)\n* Code/Plugin tiddlers\n  * Tiddlers of type `script/js` are just executed (eval) in global context\n  * Macros - e.g. to open/close all/selected tiddlers\n    * `<<ShowAllTiddlersButton>>` <<ShowAllTiddlersButton>>\n    * `<<CloseAllTiddlersButton>>` <<CloseAllTiddlersButton>>\n* Theming\n  * [[$Theme]] stores name of [Themes](#msg:search:$tag:$Theme) e.g.:\n    * [[$CoreTheme]] which lists [StyleSheets](#msg:search:$tag:$StyleSheet)\n  * Stylesheets can be in one or more tiddlers\n  * [[$DisplayTemplate]] tiddler determines display of tiddler\n  * [[$TitleBar]] to customize the titlebar\n  * `<<ThemeSelector>>` <<ThemeSelector>>\n* Structured Data\n  * Configurable lists or key-value pairs via `list` tiddlers\n    * e.g. Tiddler types from [[$TiddlerTypes]] tiddler\n  * Configuration objects via `json` tiddlers\n    * e.g. Backup settings for [[Backup2JSONBinPlugin]]\n* Packages\n  * Import tiddlers from a list of packages in [[$CorePackages]] ✅\n  * Import tiddlers from any URL\n\n## Other/Tech\n* Basic pub/sub events ✅\n* Vanilla JS, no complicated framework",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4656123Z",
      "updated": "2024-10-22T10:25:39.1400391Z"
    },
    {
      "title": "Help",
      "text": "## Searching\n* To search hidden tiddlers type `$` followed by your search query\n* To search by tag type `$tag:Styling`\n",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4666121Z",
      "updated": "2024-09-16T10:30:27.0000000Z"
    },
    {
      "title": "Parameters",
      "text": "Parameters are used to pass messages to objects or widgets.\n\nFor example `<<example.greet Mr. Smith>>` passes 2 string parameters to the `greet` [[Widget]] in [[ExamplePlugin]].  Technically it's one parameter `\"red,green,blue\"` (because there are no spaces) and thus the widget must `split()` the string into an array.\n\nSince TWiki is text based the string `\"red green blue\"` must be parsed to produce parameters. We support 2 basic strategies for function parameters (named and unnamed).\n\n## Unnamed Parameters\nTradional JavaScript functions accept the passing of multiple unnamed (or positional) parameters as in `function macro(p1, p2, p3)` which accepts 3 arguments. We can invoke it as such:\n* `<<macro foo bar>>` becomes `macro(\"foo\", \"bar\")` (unquoted space-separated strings)\n* `<<macro 1 true car>>` becomes `macro(1, true, \"car\")` (literal numbers and booleans)\n* `<<macro 1 \"true car\">>` becomes `macro(1, \"true car\")` (quoted strings with spaces)\n* `<<macro 1 true \"{foo()}\">>` becomes `macro(1, true, foo())` (eval expression)\n\nNote: Technically the parameters are parsed into an array which is then spread as it is passed to the function.\n\n## Named Parameters\nModern JavaScript functions expect a single object as a parameter or what may be called named parameters:\nConsider the `function greet({title, lastName})` which accepts 2 named parameters. It can be invoked as such:\n* `<<greet title:Mr. lastName:Smith>>` yielding `greet(\"Mr.\", \"Smith\")` (unquoted space-separated strings)\n* `<<greet title:\"Prof. Dr.\" lastName:\"Bryson\">>` yielding `greet(\"Prof. Dr.\", \"Bryson\")` (quoted strings with spaces)\nThe same rules for booleans `true/false` or numbers and eval expressions apply as above.\n\nNotes:\n* There may be no space before or after the `:` and properties may contain only characters `a-z`, `A-Z`, `0-9` or the `_` .\n* Objects do not (yet) support dynamic/eval expressions like `foo:{fcn()}`\n\n## Arrays\nIt is not yet possible to pass an array to a function. We get around this by passing a csv string which the function can then manually `split(',')`.\nIn future arrays will be possible via comma-separated tokens:\n* `<<add 1,2,3>>` yielding `add([1, 2, 3])`\n\nFor example `<<selector red,green,blue>>` passes three colors to the [[SelectorWidget]].  Technically it's one parameter `\"red,green,blue\"` (because there are no spaces) and thus the widget must `split()` the string into an array.\n\n## Dynamic Parameters\nTWiki supports [[Commands]] which allow 3 types of serialized parameters:\n* ",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4676118Z",
      "updated": "2024-10-26T11:17:27.9590281Z"
    },
    {
      "title": "Sections",
      "text": "## Expandable Sections\n\n<<Section name:\"Click here\" content:\"For more content here...\">>\n<<Section name:WebsitePackage message:tiddlers.list payload:\"$pck=website\">>\n\n## Expose: Render on Expand\n<<Expose name:Theme message:tiddler.content payload:$TestLinks>>\n\n## Inline Expandable Section\nTODO: Style these as clickable/expandable\n* <<Expand name:Theme message:tiddler.text payload:$Theme>>\n* <<Expand name:Theme message:tiddler.text payload:$Theme>>",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4696114Z",
      "updated": "2024-10-26T19:25:36.5489254Z"
    },
    {
      "title": "Tags",
      "text": "<<AllTagsLinked   \\n>>\n\n\nSpecial System Tags:\n* `$Shadow`: Indicates tiddler is a shadow tiddler\n* `$NoEdit`: Protects a tiddler against changes\n* `$NoImport`: Will not be overwritten by a package import (unless package is imported with force)",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4706109Z",
      "updated": "2024-10-30T10:58:17.5535228Z"
    },
    {
      "title": "Themes",
      "text": "Themes are collections of stylesheets.\n\nThe shadow [[$Theme]] tiddler contains one word: the name of the tiddler with the current theme (e.g. {{$Theme}}). This theme tiddler should contain a [[DataList]] of stylesheets. To change the theme just edit the $Theme tiddler and enter the name of any tiddler containing a list of stylesheets.\n\nBy convention we tag themes with [$Theme](#msg:search:$tag:$Theme) to make them easier to find. It also lets you instantly switch themes without reloading. Themes should include `Light` or `Dark` in their name to assist in automatically using the right styles for code/syntax highlighting.\n\nBy convention we tag stylesheets with [$StyleSheet](#msg:search:$tag:$StyleSheet) to make them easier to find. This also enables fast edits to stylesheets without reloading to see the results.\n\n",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4716103Z",
      "updated": "2024-10-12T05:49:02.2084490Z"
    },
    {
      "title": "Welcome",
      "text": "# Welcome\n\nTWiki is, like TiddlyWiki, a cool way to manage semi-structured information with the core concept being \"code is data\". [[Features]]\n\n## Introduction\nWith TWiki everything is in the database including code meaning that the information platform is also the development environment.\n\nWhen you create a new \"entry\" it can be data (like a note) or code which actually runs - so installing a plugin means, in practice, adding a new entry.\n\nCheckout these cool topics:\n* [[Themes]]\n* [Packages](#$CorePackagesHelp)\n\n---\nNOTE: This 'Welcome' tiddler is part of the [package](#$CorePackagesHelp) [website](#msg:search:$pck:website).\n",
      "tags": [],
      "type": "x-twiki",
      "created": "2024-11-08T10:20:43.4726107Z",
      "updated": "2024-10-05T07:36:55.5130746Z"
    }
  ]
}
